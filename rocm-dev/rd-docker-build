#!/usr/bin/bash
# create docker image: shisa-docker-<rocm version>
# expose rdh
rdh_root="$(realpath $0|xargs dirname)/.."
source ${rdh_root}/activate

# expose self
bin_dir=$(realpath $0|xargs dirname)
SELF_TAG="[$(basename $0)]"

# import tools
source docker-helper
source rd-config
source os-helper

function get_rocm_gpg_file() {
    # check https://mkmartifactory.amd.com/artifactory/list/amdgpu-deb to get a available installer.
    local installer=amdgpu-install-internal_7.1-${ubuntu_version}-1_all.deb
    if ! wget -N -P ./tmp/ "https://mkmartifactory.amd.com/artifactory/list/amdgpu-deb/${installer}" &>/dev/null; then
        die "fail: download ${installer}"
    fi

    if ! dpkg-deb -x ./tmp/${installer} ./tmp; then
        die "fail: extract ${installer}"
    fi

    if ! cp ./tmp/etc/apt/trusted.gpg.d/rocm-internal.gpg .; then
        die "fail: copy rocm-internal.gpg"
    fi
    rm -rf ./tmp
    return 0
}

# run at host
if is_inside_docker; then
    die "fail: cannot run inside docker!"
fi

# dockerfile
docker_file="${rdh_root}/dockerfile/rocm-dev.dockerfile"

# close old instance
close_container "$instance_name_rd"

# docker build
log "docker build: $image_name_rd"
pushd "${rdh_root}/dockerfile"

# prepare rocm-internal.gpg file
get_rocm_gpg_file

create_user_options="--build-arg DUID=$(id -u) `
                    `--build-arg DGID=$(id -g) `
                    `--build-arg DUSERNAME=$(whoami | sed -e 's/-//g') `
                    `--build-arg DHOME=${HOME} `
                    `--build-arg DVGID=$(getent group | grep -Po 'video:\w:\K\d+') `
                    `--build-arg DRGID=$(getent group | grep -Po 'render:\w:\K\d+') `
                    `--build-arg DSHELL=${SHELL}"

if ! docker build -t "$image_name_rd" `
                 `-f $docker_file `
                 `${create_user_options} `
                 `--build-arg UBUNTU_VERSION=${ubuntu_version} `
                 `--build-arg UBUNTU_CODENAME=$(get_ubuntu_code_name ${ubuntu_version}) `
                 `--build-arg GFX_BUILD=${gfx_build} `
                 `--build-arg ROCM_BRANCH=${rocm_branch} `
                 `--build-arg ROCM_BUILD=${rocm_build} .; then
    die "fail to build: $image_name_rd"
fi

# clean up
rm -rf ./rocm-internal.gpg
popd
log "docker build success: $image_name_rd"