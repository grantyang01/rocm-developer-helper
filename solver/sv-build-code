#!/bin/bash
rdh_root="$(realpath $0|xargs dirname)/.."
source ${rdh_root}/activate

# expose self
bin_dir=$(realpath $0|xargs dirname)
SELF_TAG="[$(basename $0)]"

# import tools
source docker-helper
source rd-config
source sv-config

# run inside docker instance of $instance_name_rd
if ! is_docker_instance "$instance_name_rd" && \
   ! is_docker_instance "$instance_name_sv" ; then
    die "fail: please run it at instance: $instance_name_rd or $instance_name_sv"
fi

function collect_msg() {
    local type=$1
    local log=$2
    local msg="${@:3}"

    if (( type != 0 )); then
        echo "${log}    $(format_error $msg)\n"
    else
        echo "${log}    $(format_msg $msg)\n"
    fi
}

function clone_component() {
    local comp=${1%/*}
    local branch=${1#*/}

    log "clone: $comp"
    local src_dir=$(realpath ${solver_src_root})/${comp,,}    
    refresh_dir "${src_dir}"
    local rocm_url="https://github.com/ROCm/${comp}"
    if ! git clone "${rocm_url}" -b ${branch} ${src_dir}; then
        clone_status=-1
        clone_log=$(collect_msg 1 "$clone_log" "$comp: fail")
    else
        clone_log=$(collect_msg 0 "$clone_log" "$comp: succ")
    fi
}

function build_component() {
    local comp=${1%/*}
    local branch=${1#*/}
    local src_dir=$(realpath ${solver_src_root})/${comp,,}

    pushd "$src_dir"
    local comp_build_status=0
    if [[ "$comp" == "rocPRIM" ]]; then
        # build and install
        if ! elevate_if_not_root ./install -i; then
            comp_build_status=-1
            build_log=$(collect_msg 1 "$build_log" "$comp fail: ./install -ri")
        fi
        if (( comp_build_status == 0 )); then
            build_log=$(collect_msg 0 "$build_log" "$comp build: succ")
        else
            build_log=$(collect_msg 1 "$build_log" "$comp build: fail")
        fi

    elif [[ "$comp" == "hipBLAS-common" ]]; then
        if ! cmake -S . -B ./build; then
            comp_build_status=-1
            build_log=$(collect_msg 1 "$build_log" "$comp fail: cmake -S . -B ./build")
        fi

        # build and install
        pushd ./build
        if ! elevate_if_not_root cmake --install . --prefix "$ROCM_PATH"; then
            comp_build_status=-1
            build_log=$(collect_msg 1 "$build_log" "$comp fail: make install")
        fi
        popd

        if (( comp_build_status == 0 )); then
            build_log=$(collect_msg 0 "$build_log" "$comp build: succ")
        else
            build_log=$(collect_msg 1 "$build_log" "$comp build: fail")
        fi
    elif [[ "$comp" == "hipBLASLt" || "$comp" == "rocBLAS" ]]; then
        # release and depencies
        if ! ./install.sh -d -a "${architecture}"; then
            comp_build_status=-1
            build_log=$(collect_msg 1 "$build_log" "$comp fail: ./install.sh -d -a ${architecture}")
        fi

        # install release
        pushd ./build/release
        if ! elevate_if_not_root cmake --install . --prefix "$ROCM_PATH"; then
            comp_build_status=-1
            build_log=$(collect_msg 1 "$build_log" "$comp fail: make install")
        fi
        popd

        # debug
        if ! ./install.sh -g -a "${architecture}"; then
            comp_build_status=-1
            build_log=$(collect_msg 1 "$build_log" "$comp fail: ./install.sh -g -a ${architecture}")
        fi

        if (( comp_build_status == 0 )); then
            build_log=$(collect_msg 0 "$build_log" "$comp build: succ")
        else
            build_log=$(collect_msg 1 "$build_log" "$comp build: fail")
        fi
    elif [[ "$comp" == "rocSOLVER" ]]; then
        # release build depencies, no optimization
        if ! ./install.sh -cnd -a "${architecture}"; then
            comp_build_status=-1
            build_log=$(collect_msg 1 "$build_log" "$comp fail: ./install.sh -cnd -a ${architecture}")
        fi
        # install release
        pushd ./build/release
        if ! elevate_if_not_root cmake --install . --prefix "$ROCM_PATH"; then
            comp_build_status=-1
            build_log=$(collect_msg 1 "$build_log" "$comp fail: make install")
        fi
        popd

        # debug, clang20 crash while build kernel. client-only now
        if ! ./install.sh --clients-only -g -a "${architecture}"; then
            comp_build_status=-1
            build_log=$(collect_msg 1 "$build_log" "$comp fail: ./install.sh -gn")
        fi
        if (( comp_build_status == 0 )); then
            build_log=$(collect_msg 0 "$build_log" "$comp build: succ")
        else
            build_log=$(collect_msg 1 "$build_log" "$comp build: fail")
        fi
    fi
    popd

    (( build_status += comp_build_status ))
}

architecture="gfx942;gfx950"
components="rocPRIM/develop `
           `hipBLAS-common/develop `
           `hipBLASLt/develop `
           `rocBLAS/develop `
           `rocSOLVER/develop"

clone_status=0
clone_log=""
build_status=0
build_log=""

for curr in $components; do
    clone_component "$curr"
done

# components="rocSOLVER/develop"
for curr in  $components; do
     build_component "$curr"
done

log "clone status: $clone_status"
print_log "$clone_log"

log "build status: $build_status"
print_log "$build_log"