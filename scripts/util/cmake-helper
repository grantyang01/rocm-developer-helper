#!/bin/bash
# depends to tools
function cmake_build() {
    local src=$1
    local build_type=$2
    local extra_options="${@:3}"
    local builds
    if [[ "${build_type,,}" == debug || "${build_type,,}" == dbg ]]; then
        builds=Debug
    elif [[ "${build_type,,}" == release || "${build_type,,}" == rel ]]; then
        builds=Release
    elif [[ "${build_type,,}" == releasewithdbginfo ]]; then
        builds=RelWithDebInfo
    elif [[ "${build_type,,}" == minsizerel ]]; then
        builds=MinSizeRel
    elif [[ "${build_type,,}" == all ]]; then
        builds="Debug Release"
    else
        die "unknown build_type: $build_type"
    fi

    local build
    for build in $builds; do
        log "build $build: $src"
        local dbg_option="-DCMAKE_BUILD_TYPE=$build"
        local target="$src/build-${build,,}"

        refresh_dir "$target"
        if ! cmake -S "$src" -B "$target" $dbg_option $extra_options; then
            die "fail: cmake $target"
        fi

        if ! cmake --build "$target" -j $(nproc); then
            die "fail: make $target"
        fi
    done
}

function cmake_install() {
    # default: current dir
    local build_dir="${1:-.}"
    local install_dir="$2"

    if [[ -z "$install_dir" ]]; then
        # default: $ROCM_PATH
        if [[ ! -z "$ROCM_PATH" ]]; then
            install_dir="$ROCM_PATH"
        else
            die "fail: no install target"
            return -1
        fi
    fi

    if ! elevate_if_not_root cmake --install "$build_dir" --prefix "$install_dir"; then
        die "fail: cmake --install $build_dir --prefix $ROCM_PATH"
    fi

    log "succ: cmake --install $build_dir --prefix $ROCM_PATH"
    return 0
}