#!/bin/bash

function is_inside_docker() {
    if [ -f /.dockerenv ]; then
        return 0
    fi
    return -1
}

function is_docker_instance() {
    local instance_name=$1
    if is_inside_docker && [[ "$(hostname)" == *"$instance_name" ]]; then
        return 0
    fi
    return -1
}

function init_docker_alias() {
    # expose simple command with alias
    printf "alias dk='sudo docker'\nalias docker='sudo docker'\n" >> ~/.bashrc
    # expose complicated cmd with functions
    printf ". $bin_dir/util/docker-cmd-alias\n" >> ~/.bashrc
}

function install_docker_engine() {
    # install doc engine
    # remove unofficial doc engine pkgs. Ubuntu 24.04 repos has all of them
    control_pkgs "docker.io docker-doc docker-compose docker-compose-v2 podman-docker containerd runc" 2

    # install two dependencies
    control_pkgs "ca-certificates curl" 1

    # Add GPG key
    if [[ ! -f "/etc/apt/keyrings/docker.asc" ]]; then
        sudo install -m 0755 -d /etc/apt/keyrings
        sudo curl -fsSL https://download.docker.com/linux/ubuntu/gpg -o /etc/apt/keyrings/docker.asc
        sudo chmod a+r /etc/apt/keyrings/docker.asc
    fi

    # Add the repository to Apt sources:
    if [[ ! -f /etc/apt/sources.list.d/docker.list ]]; then
        echo \
        "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.asc] https://download.docker.com/linux/ubuntu \
        $(. /etc/os-release && echo "${UBUNTU_CODENAME:-$VERSION_CODENAME}") stable" | \
        sudo tee /etc/apt/sources.list.d/docker.list > /dev/null
        sudo apt-get update
    fi
    
    # install pkgs
    control_pkgs "docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin" 1
    # verify
    if ! sudo docker run hello-world; then
        die "failed to install doc engine"
    else
        log "doc eninge installed successfully"
    fi

    # add $USER to docker group to use docker on Linux without sudo
    if ! sudo usermod -aG docker $USER; then
        die "failed to add $USER to group docker"
    fi
}

function get_amd_driver_info() {
    local image_id=$1

    # grfx build id
    local grfx_build=$(sudo docker run -it --rm  -a stdout --entrypoint cat  "$image_id" /etc/apt/sources.list.d/amdgpu-build.list |`
    `awk '/^deb /{print $4}')

    local ai_arguments
    if [[ ! -z "$grfx_build" ]]; then
        log "grfx: $grfx_build"
        ai_arguments="-g $grfx_build"
    fi

    # rocm branch/ver
    local rocm_ver=$(sudo docker run -it --rm  -a stdout --entrypoint cat  "$image_id" /etc/apt/sources.list.d/rocm-build.list |`
    `awk '/^deb /{printf "%s/%s\n",$5, $6}')

    if [[ ! -z "$rocm_ver" ]]; then
        log "rocm: $rocm_ver"
        if [[ ! -z "$ai_arguments" ]]; then
            ai_arguments="$ai_arguments "
        fi
        ai_arguments="$ai_arguments-r $rocm_ver"
    fi

    if [[ ! -z "$ai_arguments" ]]; then
        log "amdgpuInstaller argument(s): ${ai_arguments}"
    fi
}

function clean() {
    # stopped container
    docker container prune -f

    # remove dangling images
    local images=$(docker images -f "dangling=true" -q)
    if [ ! -z "$images" ]; then
        docker rmi $images
    fi

    # remove unused volume
    docker volume prune -f

    # remove unused network
    docker network prune -f

    # 
    docker system prune -f

    # remove build caches
    docker builder prune -f
}

function is_container_runing() {
    local container_name="$1"
    if [ "$(docker ps --filter "name=^/${container_name}$" --format '{{.Names}}')" == "$container_name" ]; then
        return 0
    fi
}

function is_container_exist() {
    local container_name="$1"
    if [ "$(docker ps -a --filter "name=^/${container_name}$" --format '{{.Names}}')" == "$container_name" ]; then
        return 0
    fi
}

function close_container() {
    local container_name="$1"

    if is_container_runing "$container_name"; then
        docker stop $container_name &>/dev/null
    fi

    if is_container_exist "$container_name"; then
        docker rm $container_name &>/dev/null
    fi
    return 0
}