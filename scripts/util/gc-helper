#!/bin/bash
function hyperlink(){
    local addr=$1
    local info=$2

    local ESC_8="\x1b]8;;"
    local ST="\x07"

    # format: [ESC_8 <addr> ST <info>]+ ESC_8 ST
    echo -E "${ESC_8}${addr}${ST}${info}${ESC_8}${ST}"
}

function gl(){
    git log --oneline $@
}

function grs(){
    git remote show origin
}

function gsd() {
    git rev-parse --show-toplevel
}

function gls(){
    git log --pretty=format:"%h|%an|%ad|%s" --date=short -25 $@ | \
    git-log-filter.awk -v path="$(git rev-parse --show-toplevel)"
}

function glsf(){
    # filter commits added by AMD bot
    git log --pretty=format:"%h|%an|%ad|%s" --date=short -25 \
        --grep='^SWDEV-[0-9]+ - Submodule' --grep='^SWDEV-[0-9] ' -E --invert-grep $@ -- . | \
    git-log-filter.awk -v path="$(git rev-parse --show-toplevel)"
}

function glsp(){
    pushd ./icd/imported/pal
    gls -- .
    popd
}

function glss(){
    pushd ./icd/imported/$1
    gls -- . 
    popd
}

function gd(){
    if [[ $# -eq 0 ]]; then
        echo "usage: gd <commit>"
        exit -1
    fi
    git show --quiet $1
    git difftool -t meld -d $1~1...$1
}

function list-submodule-branch() {
    git submodule  foreach --recursive 'git branch'
}

function checkout-submodule-branch {

    # toplevel using default parent branch: amd/stg/xgl
    pathes=($(git submodule foreach 'git branch' | \
grep detached -B1  | \
grep -v detached | \
grep -v -- ^-- | \
cut -d " " -f 2 | cut -d "'" -f 2 | \
awk '{$1=$1;print}'))

    branches=($(git submodule foreach 'git branch' | \
grep detached -A1 | \
grep -v detach | \
grep -v -- ^-- | \
awk '{$1=$1;print}'))

    echo "pathes: ${#pathes[@]}"
    echo "branches: ${#branches[@]}"
    for((i=0;i<${#pathes[@]};i++))
    do
        echo "$i: ${pathes[$i]} ${branches[$i]}"
        pushd "${pathes[$i]}" > /dev/null
        # git checkout "${branches[$i]}"
        git checkout "amd/stg/xgl"
        popd > /dev/null
    done

    # git submodule foreach 'git checkout amd/stg/xgl'
}

function gu(){
    # update amd/stg/xgl
    git pull

    # toplevel using default parent branch: amd/stg/xgl
    git submodule foreach 'git checkout amd/stg/xgl'

    # lower level is controlled by .gitmodules
    # compiler/import/llvm-dialects not working
    #git submodule foreach 'git submodule update --remote'
}

function init_gc_mime() {
    local parser_path="$1"
    # expose gc-parser
    cat >>~/.bashrc <<EOL
source $parser_path/util/gc-helper
EOL

    # specifies the x-scheme-handler/... MIME type: gc
    # gc.desktop
    cat >~/.local/share/applications/gc.desktop <<EOL
[Desktop Entry]
Name=GIT‑VIEW-COMMITMENT
Encoding=UTF-8
Version=1.0
Type=Application
Terminal=true
Exec=$parser_path/util/parse_gc_url %u
Comment=GIT‑COMMITMENT handler
Icon=
Categories=Application;Network;
MimeType=x-scheme-handler/gc;
EOL

    # gct.desktop
    cat >~/.local/share/applications/gct.desktop <<EOL
[Desktop Entry]
Name=GIT‑VIEW-COMMITMENT-FILE
Encoding=UTF-8
Version=1.0
Type=Application
Terminal=true
Exec=$parser_path/util/parse_gc_url %u
Comment=GIT‑COMMITMENT-FILE handler
Icon=
Categories=Application;Network;
MimeType=x-scheme-handler/gcf;
EOL

    # Build cache database of MIME types 
    if ! update-desktop-database ~/.local/share/; then
        die "can not build cache database of gc MIME type"
    fi

    # Register a gc protocol to MIME
    if ! xdg-mime default gc.desktop x-scheme-handler/gc; then
        die "failed to register gc protocol"
    fi

    if ! xdg-mime default gct.desktop x-scheme-handler/gct; then
        die "failed to register gct protocol"
    fi

    # gc protocol registered?
    if ! grep 'gc=gc\.desktop' ~/.config/mimeapps.list &>/dev/null; then
        die "failed to register gc protocol"
    fi

    if ! grep 'gct=gct\.desktop' ~/.config/mimeapps.list &>/dev/null; then
        die "failed to register gct protocol"
    fi
}

function init_git_config() {
    # ~/.gitconfig
    if [[ ! -f ~/.gitconfig ]]; then
        cat >~/.gitconfig <<EOL
[filter "lfs"]
	required = true
	clean = git-lfs clean -- %f
	smudge = git-lfs smudge -- %f
	process = git-lfs filter-process        
[core]
  editor = code --wait
[diff]
  tool = vscode
[difftool "vscode"]
  cmd = code --wait --diff \$LOCAL \$REMOTE
[merge]
  tool = vscode
[mergetool "vscode"]
  cmd = code --wait \$MERGED
[difftool]
  prompt = false
[color]
  ui = auto
EOL
    fi
}
