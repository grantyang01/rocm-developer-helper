# !bin/sh
help() {
    echo "$(basename $0) [ -r <root_path> | -i <stage> |  -c <branch> | -l | -b | -g | -t | -p | -h] "
    echo "    -r <root_path>"
    echo "        set root path of rocm src code"
    echo "    -l "
    echo "        use public src code repo"
    echo "    -i <stage>"
    echo "        0 - initialize developer tools"
    echo "        1 - deinitialize(unblock rocm pkgs, and prepare for uninstallation)"
    echo "    -c <branch>"
    echo "        initialize repos of clr/hip/hip-tests to current directory"
    echo "    -b"
    echo "        build and install clr/hip-tests"
    echo "    -g"
    echo "        generate clr profile string"
    echo "    -t"
    echo "        run hip-tests"
    echo "    -p"
    echo "        parser hip-tests results"
    echo "    -h"
    echo "        display this message"
    exit 0
}

# stage - 0  initialize
#       - 1  restore pkgs hold status
function init() {
    local stage="$1"

    local rocm_pkgs="hipcc:amd64 rocm-cmake:amd64 rocminfo:amd64"
    if (( stage == 0 )); then
        # prefer rocm pkgs
        prefer_pkgs "$rocm_pkgs" 1 "rocm-prefer-local-600"
    else
        # unperfer rocm pkgs
        prefer_pkgs "$rocm_pkgs" 2 "rocm-prefer-local-600"
        return 0
    fi

    # developer tools
    control_pkgs "cmake build-essential python3-venv git-lfs libboost-all-dev doxygen" 1

    # pkgs needed by hip-tests
    # control_pkgs "freeglut3-dev libegl1-mesa-dev:amd64 libgl1-mesa-dev:amd64" 1
    control_pkgs "freeglut3-dev" 1

    # create venv and install CppHeaderParser
    refresh_dir "$PYTHON_ENV"
    python3 -m venv "$PYTHON_ENV"
    . "$PYTHON_ENV/bin/activate"
    pip install --upgrade pip
    pip --version
    pip install CppHeaderParser
    python3 -m pip list

    # add user to render and video group
    sudo usermod -a -G video,render $USER
    return 0
}

function config() {
    BASE_DIR="$1"
    local repo_url
    if (( internal_repos == 1 )); then
        repo_url="git@github.com:AMD-ROCm-Internal"
    else
        repo_url="git@github.com:ROCm"
    fi

    local projects="clr hip hip-tests"
    local name
    for name in $projects; do
        local name_v=${name//-} # remove - in "hip-test"
        name_v=${name_v^^} # to upper cases
        REPOS="$REPOS ${repo_url}/${name}.git"
        # setup *_DIR variables
        eval ${name_v}_DIR="${BASE_DIR}/${name}"
    done
    PYTHON_ENV="$HOME/python-venv/cpp-header-parser"
    log "CLR_DIR=$CLR_DIR"
    log "HIP_DIR=$HIP_DIR"
    log "HIPTESTS_DIR=$HIPTESTS_DIR"
    log "PYTHON_ENV=$PYTHON_ENV"
    return 0
}

function setup_repos() {
    local base_dir="$1"
    local repos="$2"
    local branch="$3"
    local repo

    for repo in $repos; do
        local name=${repo%.*}
        name=${name##*/}
        local path="$BASE_DIR/$name"
        log "setup <$name/$branch> at <$path> ..."
        setup_repo "$name" "$path" "$repo" "$branch"
    done
}

function generate_profile() {
    local tool="${CLR_DIR}/hipamd/src/hip_prof_gen.py"
    if [[ ! -f "${tool}" ]]; then
        die "${tool} not exist"
    fi

    local header="${HIP_DIR}/include/hip/hip_runtime_api.h"
    if [[ ! -f "${header}" ]]; then
        die "${header} not exist"
    fi

    local hipamd="${CLR_DIR}/hipamd/src"
    if [[ ! -d "${hipamd}" ]]; then
        die "${hipamd} not exist"
    fi

    local prof_origin="${CLR_DIR}/hipamd/include/hip/amd_detail/hip_prof_str.h"
    if [[ ! -f "${prof_origin}" ]]; then
        die "${prof_origin} not exist"
    fi

    local prof_new="${CLR_DIR}/hipamd/include/hip/amd_detail/hip_prof_str.h.new"

    # generate profile
    python3 ${tool} -v -p -t --priv "$header" "$hipamd" "$prof_origin" "$prof_new"

    if [[ ! -f "${prof_new}" ]]; then
        die "${prof_new} not generated"
    else
        log "${prof_new} generated successfully"
    fi
    return 0
}

function build_clr(){
    local CLR_BUILD="${CLR_DIR}/build"
    refresh_dir "$CLR_BUILD"
    pushd "$CLR_BUILD"

    . "$PYTHON_ENV/bin/activate"
    if ! cmake `
        `-DHIP_COMMON_DIR=$HIP_DIR `
        `-DHIP_PLATFORM=amd `
        `-DCMAKE_PREFIX_PATH="/opt/rocm/" `
        `-DCMAKE_INSTALL_PREFIX=/opt/rocm `
        `-DHIP_CATCH_TEST=0 `
        `-DCLR_BUILD_HIP=ON `
        `-DCLR_BUILD_OCL=OFF ..; then
        die "cmake fail: clr"
    fi
    log "cmake successfuly: clr"

    if ! make -j $(nproc); then
        die "make fail: clr"
    fi
    log "make successfuly: clr"
    
    if ! sudo make install; then 
        die "install fail: clr"
    fi
    log "install successfuly: clr"
    popd
}

function build_hip_tests() {
    # hip-tests
    local HIPTESTS_BUILD="${HIPTESTS_DIR}/build"
    refresh_dir "$HIPTESTS_BUILD"
    pushd "$HIPTESTS_BUILD"
    if ! cmake ../catch `
         `-DHIP_PLATFORM=amd `
         `-DHIP_PATH=/opt/rocm; then
         die "cmake fail: hip-tests"
    fi
    log "cmake successfuly: hip-tests"

    if ! make build_tests -j $(nproc); then
        die "make fail: hip-tests"
    fi
    log "make successfuly: hip-tests"
    popd
}

function build_component() {
    local component=$1
    case $component in
        clr)build_clr;;
        *test*)build_hip_tests;;
        all)build_clr
            build_hip_tests;;
    esac
}

function unit_test() {
    local group="$1"
    local path="${HIPTESTS_DIR}/build/catch_tests/unit"
    if [[ ! -d "$path" ]]; then
        die "unit test not found: $path"
    fi

    pushd "$path"
    local tests
    if [[ "$group" == "all" ]]; then
        tests="$(ls -d */| sed 's#/##')"
    else
        tests="$group"
    fi

    local name
    local log_dir="$(realpath "${BASE_DIR}/log")"
    [[ ! -d "$log_dir" ]] && mkdir -p "$log_dir"
    count=0
    for name in $tests; do 
        if [[ "$group" == "all" ]]; then
            if [[ "$name" == "memory" || "$name" == "virtualMemoryManagement" ]]; then
                continue;
            fi
        fi
        local log_file="${log_dir}/${name}.log"
        (( count = count + 1 ))
        printf "%d.name: %s\n" "$count" "$name"
        pushd "$name"
        ctest -O "$log_file"
        popd
        log "test compeleted: $name"
    done
    popd
}

function parse_log() {
    local log_files="$(ls ${BASE_DIR}/log/*.log)"
    local name
    printf "Ordinal,Name,Passed,Skipped,Failed,Exception\n"

    ordinal=0
    for file_name in $log_files; do
        local name=${file_name%.*}
        name=${name##*/}
        local pass=$(grep 'Passed' "$file_name" | wc -l)
        local skip=$(grep '\*\*\*Skipped' "$file_name" | wc -l)
        local fail=$(grep '\*\*\*Failed' "$file_name" | wc -l)
        local exception=$(grep '\*\*\*Exception' "$file_name" | wc -l)
        (( ordinal = ordinal + 1 ))
        printf "%d,%s,%s,%s,%s,%s\n" $ordinal "$name" "$pass" "$skip" "$fail" "$exception"
    done

    printf "Ordinal,Failed/Exception\n"
    grep -h '(SEGFAULT)\|(Failed)' $log_files |`
    `awk -F - '{printf "%d,%s\n", NR, $2}'

    # test time > 10s
    printf "Ordinal,test time > 10 secs\n"
    grep -Eh  '[[:blank:]]+[0-9\.]+\s+sec$' $log_files |`
    `grep "Passed\|Skipped" |`
    `awk '
    BEGIN { count = 0; }
    {
        time=$(NF-1);
        $1=$2=$3="";
        if (time>10) {
            count++;
            printf "%d,%s\n", count , $0
        }
    }'
}

# make tools available
bin_dir=$(realpath $0|xargs dirname)
PATH=${bin_dir}:${bin_dir}/util:$PATH
SELF_TAG="[$(basename $0)]"

# import utilities
. tools
. os-helper
. package-helper
. git-helper
. docker-helper

# init parameters
internal_repos=1
root_path="./"
init_env=0
init_stage=0
init_repos=0
repo_branch=""
build_comps=""
generate_prof=0
test_groups=""
parse=0
while getopts r:i:t:b:c:lgph arg
do
	case $arg in
        r)  if [[ ! -z "$OPTARG" ]]; then
                root_path="$OPTARG"
            else
                root_path="./"
            fi
            ;;
        l)  internal_repos=0;;
        i)  init_env=1
            init_stage="$OPTARG";;
        c)  init_repos=1
            repo_branch=${OPTARG:-amd-staging};;
        b)  build_comps=${OPTARG:-all};;
        g)  generate_prof=1;;
        t)  test_groups=${OPTARG:-all};;
        p)  parse=1;;
		h|*)help
            exit 0
            ;;
	esac
done

if [[ ! -d "$root_path" ]]; then
    if ! mkdir -p "$root_path"; then
        die "can not create: $root_path"
    fi
fi
config "$(realpath "$root_path")"

if (( init_env == 1 )); then
    init "$init_stage"
fi

if (( init_repos == 1 )); then
    setup_repos "$BASE_DIR" "$REPOS" "$repo_branch"
fi

if [[ ! -z "$build_comps" ]]; then
    build_component "$build_comps"
fi

if (( generate_prof == 1 )); then
    generate_profile
fi

if [[ ! -z "$test_groups" ]]; then
    unit_test "$test_groups"
fi

if (( parse == 1 )); then
    parse_log
fi

exit 0