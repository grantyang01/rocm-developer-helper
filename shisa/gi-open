#!/usr/bin/bash
rdh_root="$(realpath $0|xargs dirname)/.."
source ${rdh_root}/activate

# expose self
bin_dir=$(realpath $0|xargs dirname)
SELF_TAG="[$(basename $0)]"

# import tools
source docker-helper
source gi-config

# run at host
if is_inside_docker; then
    die "fail: cannot run inside docker!"
fi

# close old instance
close_container "$instance_name_gi"

# launch gpu-interface in background
if ! docker run -it `
        `--detach `
        `-v ${HOME}/work/shisa:/SHISA/. `
        `-e SHISA=/SHISA `
        `-v ${HOME}/work:${HOME}/work `
        `-v ${HOME}/work/.ssh:/root/.ssh `
        `-v ${HOME}/.vscode-server:/root/.vscode-server `
        `--device=/dev/kfd `
        `--device=/dev/dri `
        `-w ${HOME}/work `
        `--group-add video `
        `--cap-add=SYS_PTRACE `
        `--security-opt seccomp=unconfined `
        `--name $instance_name_gi `
        `--hostname $instance_name_gi `
        `$image_name_gi > /dev/null; then
    die "fail to run: $image_name_gi"
fi

# activate rdh
if ! docker exec "$instance_name_gi" `
            `bash -c "echo 'source ${rdh_root}/activate' >> /root/.bashrc"; then
    die "fail: rdh activate"
fi

# enter or run setup
if (( $# == 0 )); then
    # default: enter docker
    if ! docker exec -it "$instance_name_gi" bash; then
        die "fail: exec $instance_name_gi"
    fi
else 
    # run g-setup
    if ! docker exec -it "$instance_name_gi" bash -c "${rdh_root}/shisa/gi-setup"; then
        die "fail: setup gpu-interface"
    fi
fi

close_container "$instance_name_gi"